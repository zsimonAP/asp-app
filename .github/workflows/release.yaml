name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  release_windows:
    needs: create_release
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.17.0'

      - name: Install dependencies
        run: npm install

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Create Python Virtual Environment
        run: python -m venv env

      - name: Install Python dependencies
        run: env\Scripts\pip install -r requirements.txt

      - name: Debug Python environment
        run: |
          echo "Python executable path:"
          Get-Command env\Scripts\python.exe
          echo "Python environment directory contents:"
          Get-ChildItem env

      - name: Build Electron app
        run: npm run build

      - name: Package Electron app for Windows
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if (-Not (Test-Path -Path "env" -PathType Container)) {
            Write-Error "Python virtual environment not found!"
            exit 1
          }
          npm run electron:build -- --win

      - name: Debug environment variables
        run: printenv

      - name: List dist directory
        run: ls -alh dist

      - name: Upload Release Assets (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist\associated-pension-automation-hub-1.0.23-win.zip
          asset_name: associated-pension-automation-hub-1.0.23-win.zip
          asset_content_type: application/zip

  release_macos:
    needs: create_release
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.17.0'

      - name: Install dependencies
        run: npm install

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Create Python Virtual Environment
        run: python3 -m venv env

      - name: Install Python dependencies
        run: env/bin/pip install -r requirements.txt

      - name: Debug Python environment
        run: |
          echo "Python executable path:"
          which python3
          echo "Python environment directory contents:"
          ls -alh env

      - name: Build Electron app
        run: npm run build

      - name: Package Electron app for macOS
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run electron:build -- --mac

      - name: Remove Quarantine Attribute
        run: |
          xattr -dr com.apple.quarantine dist/associated-pension-automation-hub-*.dmg

      - name: Debug environment variables
        run: printenv

      - name: List dist directory
        run: ls -alh dist

      - name: Upload Release Assets (macOS DMG)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist/associated-pension-automation-hub-1.0.23-arm64.dmg
          asset_name: associated-pension-automation-hub-1.0.23-arm64.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload Release Assets (macOS ZIP)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist/associated-pension-automation-hub-1.0.23-arm64-mac.zip
          asset_name: associated-pension-automation-hub-1.0.23-arm64-mac.zip
          asset_content_type: application/zip
