name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  release_windows:
    needs: create_release
    runs-on: windows-latest

    steps:
      - name: Clear all caches
        run: |
          npm cache clean --force
          pip cache purge
          Remove-Item -Recurse -Force "$env:USERPROFILE\.cache" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force "$env:USERPROFILE\AppData\Local\Temp" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force "D:\a\_temp" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force "D:\a\asp-app\asp-app\node_modules" -ErrorAction SilentlyContinue
        shell: powershell

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.17.0'

      - name: Install Node.js dependencies
        run: |
          npm ci || npm ci
        env:
          NODE_OPTIONS: '--max_old_space_size=4096'

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Create Virtual Environment
        run: |
          python -m venv env
          source env/Scripts/activate
          pip install -r requirements.txt

      - name: Set Python Environment Variables
        run: |
          echo "PYTHONHOME=D:\a\asp-app\asp-app\env" >> $GITHUB_ENV
          echo "PYTHONPATH=D:\a\asp-app\asp-app\env\Lib\site-packages" >> $GITHUB_ENV
          echo "PYTHONEXECUTABLE=D:\a\asp-app\asp-app\env\Scripts\python.exe" >> $GITHUB_ENV
        shell: bash

      - name: Build Next.js Application
        run: npm run build

      - name: Package Electron app for Windows
        run: |
          npm run electron:build -- --win

          if (-Not (Test-Path -Path "dist" -PathType Container)) {
            Write-Error "Build output not found!"
            exit 1
          }
          if (-Not (Test-Path -Path "dist\*.exe" -PathType Leaf)) {
            Write-Error "Installer executable not found!"
            exit 1
          }
          echo "Post-Package Python Version: $(python --version)"
          echo "Post-Package Python Executable: $(where python)"
          echo "Post-Package PATH: $env:PATH"
          echo "Post-Package PYTHONHOME: $env:PYTHONHOME"
          echo "Post-Package PYTHONPATH: $env:PYTHONPATH"
          echo "Post-Package PYTHONEXECUTABLE: $env:PYTHONEXECUTABLE"
        shell: powershell

      - name: Set Executable Path
        id: set_executable_path
        run: |
          $executablePath = Get-ChildItem -Path .\dist -Filter "*.exe" | Select-Object -First 1 -ExpandProperty FullName
          echo "Executable Path: $executablePath"
          echo "::set-output name=exe_path::$executablePath"
        shell: powershell

      - name: Debug Environment Post-Build
        run: |
          $executablePath = '${{ steps.set_executable_path.outputs.exe_path }}'
          if (-Not (Test-Path -Path $executablePath -PathType Leaf)) {
            Write-Error "Executable not found!"
            exit 1
          }
          & $executablePath /S /D=D:\a\asp-app\asp-app
          python --version
          where python
          echo "Final PATH: $env:PATH"
          echo "Final PYTHONHOME: $env:PYTHONHOME"
          echo "Final PYTHONPATH: $env:PYTHONPATH"
          echo "Final PYTHONEXECUTABLE: $env:PYTHONEXECUTABLE"
        shell: powershell

      - name: Upload Release Assets (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: |
            dist/*.exe
            dist/latest.yml
          asset_name: |
            associated-pension-automation-hub-1.0.94.exe
            latest.yml
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Debug Logs
        uses: actions/upload-artifact@v2
        with:
          name: build-logs
          path: ./debug-logs
