name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  release_windows:
    needs: create_release
    runs-on: windows-latest

    steps:
      - name: Clear NPM and Python cache
        run: |
          npm cache clean --force
          pip cache purge

      - name: Clear GitHub Actions cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/pip
          key: ${{ runner.os }}-clear-cache-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-clear-cache-

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.17.0'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build Electron app
        env:
          PATH: D:\a\asp-app\asp-app\env\Scripts;${{ env.PATH }}
          PYTHONHOME: D:\a\asp-app\asp-app\env
          PYTHONPATH: D:\a\asp-app\asp-app\env\Lib\site-packages
          PYTHONEXECUTABLE: D:\a\asp-app\asp-app\env\Scripts\python.exe
          PYTHONNOUSERSITE: '1'
        run: |
          .\env\Scripts\activate
          npm run build

      - name: Package Electron app for Windows
        env:
          PATH: D:\a\asp-app\asp-app\env\Scripts;${{ env.PATH }}
          PYTHONHOME: D:\a\asp-app\asp-app\env
          PYTHONPATH: D:\a\asp-app\asp-app\env\Lib\site-packages
          PYTHONEXECUTABLE: D:\a\asp-app\asp-app\env\Scripts\python.exe
          PYTHONNOUSERSITE: '1'
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          .\env\Scripts\activate
          npm run electron:build -- --win
          
          if (-Not (Test-Path -Path "dist" -PathType Container)) {
            Write-Error "Build output not found!"
            exit 1
          }
          if (-Not (Test-Path -Path "dist\*.exe" -PathType Leaf)) {
            Write-Error "Installer executable not found!"
            exit 1
          }
      - name: Ensure virtual environment is activated and set path
        run: |
          .\env\Scripts\activate
          $env:PATH = "${{ github.workspace }}\env\Scripts;$env:PATH"
          python -m pip install --upgrade pip
          python --version
          pip --version
          where python
        shell: powershell

      - name: Set Python Environment Variables
        run: |
          echo "PYTHONHOME=D:\a\asp-app\asp-app\env" >> $env:GITHUB_ENV
          echo "PYTHONPATH=D:\a\asp-app\asp-app\env\Lib\site-packages" >> $env:GITHUB_ENV
          echo "PYTHONEXECUTABLE=D:\a\asp-app\asp-app\env\Scripts\python.exe" >> $env:GITHUB_ENV
        shell: powershell

      - name: Debug environment variables
        run: printenv

      - name: List dist directory
        run: Get-ChildItem -Path dist

      - name: Upload Release Assets (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist\associated-pension-automation-hub Setup 1.0.105.exe
          asset_name: associated-pension-automation-hub-1.0.105.exe
          asset_content_type: application/vnd.microsoft.portable-executable
