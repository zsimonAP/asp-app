name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  release_windows:
    needs: create_release
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.17.0'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Check for Python environment
        run: |
          if (-not (Test-Path -Path "env" -PathType Container)) {
            throw "Environment folder 'env' does not exist."
          } else {
            Write-Host "Environment folder 'env' exists."
          }
          
          if (-not (Test-Path -Path "env/Scripts/python.exe" -PathType Leaf)) {
            throw "Python executable 'python.exe' not found in 'env/Scripts/'."
          } else {
            Write-Host "Python executable 'python.exe' found in 'env/Scripts/'."
          }
        shell: pwsh

      - name: Set Python environment for build
        run: |
          $env:PYTHONHOME = "$PWD/env"
          $env:PYTHONPATH = "$PWD/env/Lib;$PWD/env/Lib/site-packages"
          $env:PATH = "$PWD/env/Scripts;$env:PATH"
          Write-Host "Python environment set to use 'env/Scripts/python.exe'."
        shell: pwsh

      - name: Build Electron app
        run: npm run build

      - name: Package Electron app for Windows
        run: |
          $env:GH_TOKEN="${{ secrets.GH_TOKEN }}"
          npm run electron:build -- --win
        shell: pwsh

      - name: Debug environment variables
        run: printenv

      - name: Upload Release Assets (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist\associated-pension-automation-hub Setup 1.0.117.exe
          asset_name: associated-pension-automation-hub-1.0.117.exe
          asset_content_type: application/vnd.microsoft.portable-executable
